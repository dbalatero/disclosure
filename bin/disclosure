#!/usr/bin/env ruby

require 'optparse'
require_relative '../lib/disclosure'

ARGV.push('-h') if ARGV.empty?

options = {
  input_directory: nil,
  json_file: nil,
  attachment_dir: nil,
  offset: 0,
  overwrite: false
}

opt_parser = OptionParser.new do |opts|
  opts.banner = "Usage: disclosure [options]"

  opts.separator ""
  opts.separator "Specific options:"

  opts.on(
    "-i",
    "--input DIRECTORY",
    "The input DIRECTORY of .msg emails you want to parse"
  ) do |directory|
    options[:input_directory] = directory
  end

  opts.on(
    "-j",
    "--json FILE",
    "The JSON FILE to output to."
  ) do |json_file|
    options[:json_file] = json_file
  end

  opts.on(
    "-a",
    "--attachments ATTACHMENT_DIR",
    "The ATTACHMENT_DIR to output to"
  ) do |attachment_dir|
    options[:attachment_dir] = attachment_dir
  end

  opts.on(
    "-o",
    "--offset OFFSET",
    "An integer offset from which to start parsing"
  ) do |offset|
    options[:offset] = offset
  end

  opts.on(
    "-f",
    "--force-overwrite",
    "if set overwrites the output JSON file, otherwise appends"
  ) do
    options[:overwrite] = true
  end

  opts.on_tail(
    "-h",
    "--help",
    "Show this message"
  ) do
    puts opts
    exit
  end
end

opt_parser.parse!(ARGV)

missing_options = options.keys.select { |param| options[param].nil? }

if !options[:overwrite] && File.file?(options[:json_file])
  puts "cowardly refusal to overwrite json file at #{options[:json_file]}"
  exit 1
end

unless missing_options.empty?
  puts "Missing options: #{missing_options.join(', ')}"
  puts
  puts opt_parser.help
  exit 2
end

### Processing emails

input_emails = Dir.glob("#{options[:input_directory]}/**/*.msg").sort
puts "Found #{input_emails.size} emails"

MessageParser.parse!(input_emails, options)
