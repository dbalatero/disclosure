#!/usr/bin/env ruby

require 'optparse'
require_relative '../lib/disclosure'

ARGV.push('-h') if ARGV.empty?

options = {
  input_directory: nil,
  json_file: nil,
  attachment_dir: nil,
  offset: 0,
  overwrite: false
}

opt_parser = OptionParser.new do |opts|
  opts.banner = "Usage: disclosure [options]"

  opts.separator ""
  opts.separator "Specific options:"

  opts.on(
    "-i",
    "--input DIRECTORY",
    "The input DIRECTORY of .msg emails you want to parse"
  ) do |directory|
    options[:input_directory] = directory
  end

  opts.on(
    "-j",
    "--json FILE",
    "The JSON FILE to output to."
  ) do |json_file|
    options[:json_file] = json_file
  end

  opts.on(
    "-a",
    "--attachments ATTACHMENT_DIR",
    "The ATTACHMENT_DIR to output to"
  ) do |attachment_dir|
    options[:attachment_dir] = attachment_dir
  end

  opts.on(
    "-o",
    "--offset OFFSET",
    "An integer offset from which to start parsing"
  ) do |offset|
    options[:offset] = offset
  end

  opts.on(
    "-f",
    "--force-overwrite",
    "if set overwrites the output JSON file, otherwise appends"
  ) do
    options[:overwrite] = true
  end

  opts.on_tail(
    "-h",
    "--help",
    "Show this message"
  ) do
    puts opts
    exit
  end
end

opt_parser.parse!(ARGV)

missing_options = options.keys.select { |param| options[param].nil? }

if !options[:overwrite] && File.file?(options[:json_file])
  puts "cowardly refusal to overwrite json file at #{options[:json_file]}"
  exit 1
end

unless missing_options.empty?
  puts "Missing options: #{missing_options.join(', ')}"
  puts
  puts opt_parser.help
  exit 2
end

### Processing emails

class MessageParser
  def initialize(email_paths, **options)
    @email_paths = email_paths
    @options = options
    @parsed_emails = []
  end

  def self.parse!(*args)
    new(*args).parse!
  end

  def parse!
    input_emails.each_with_index do |email_path, i|
      begin
        message = Message.new(email_path)
        handle_message(message)
      rescue Exception => e
        puts "Error: unable to parse message at #{email_path}!"
        puts "use offset of #{i} (-o #{i}) to resume task after resolving this issue"

        raise
      ensure
        write_json_file!
      end
    end
  end

  private

  attr_reader :email_paths, :options, :parsed_emails

  def input_emails
    email_paths[options[:offset] .. -1]
  end

  def write_json_file!
    # TODO group emails by thread id?
    print "writing #{parsed_emails.size} emails to #{options[:json_file]}..."

    File.open(options[:json_file], "wb") do |output_file|
      output_file.write(
        JSON.generate(
          emails: parsed_emails
        )
      )
    end

    puts "done"
  end

  def handle_message(message)
    # Write attachments out
    message.attachments.each do |attachment|
      # TODO handle duplicate clashing filenames, update attachment filename in output
      # JSON if needed

      if attachment.outlook_message?
        handle_message(attachment.to_message)
      else
        path = File.join(options[:attachment_dir], attachment.filename)
        attachment.write_as_pdf_to(path)
      end
    end

    parsed_emails << message.as_json
  end
end

input_emails = Dir.glob("#{options[:input_directory]}/**/*.msg").sort
puts "Found #{input_emails.size} emails"

MessageParser.parse!(input_emails, options)
